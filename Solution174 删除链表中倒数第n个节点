/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param head: The first node of linked list.
     * @param n: An integer
     * @return: The head of linked list.
     * 思路：先让快指针走n步，然后快慢一起走，走到头的时候慢指针指向的点删掉。
     */
    public ListNode removeNthFromEnd(ListNode head, int n) {
        // write your code here
        if(n<=0){
            return null;
        }
        
        ListNode dummy = new ListNode(0);//定义一个假节点，不是指针，是一个局部变量
        dummy.next = head;//成为新的头节点，这样真链表的头节点就是dummy.next
                          //这是，我们的head节点就有pre指针了，head节点和其他节点在前驱指针上就没什么区别了
        ListNode predelete = dummy;
        for(int i=0; i<n; i++){
            if(head == null){
                return null;
            }//每次循环前判断头节点是否为空
            head = head.next;//我们的head节点应该指向了第n节点
        }//到这里时，head节点已经向右先走了n步
        while(head != null){//紧接着前节点predelete和head节点分别向右走，直到head为空，循环结束了。
                            //这时predelete还停留在倒数第n+1的位置，因为上一步head已经走了n个节点，所以predelete慢n个节点（predelete就是题目要求的倒数第n+1位置）
            head = head.next;
            predelete = predelete.next;
        }
        predelete.next = predelete.next.next;//到头后就把predelete的next删除就可以了，dummy是虚设的点
        return dummy.next;
    }
}
